plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.bitc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-mail'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'

	// https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter
	implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.4.5'

}

tasks.named('test') {
	useJUnitPlatform()
}

//// projectDir => 현재 프로젝트 경로(스프링 프로젝트)
//// dream_com_front => 리액트 프로젝트 폴더 이름
//// frontendDir 로 변수를 정의
//// $는 변수사용시 사용한다.
//def frontendDir = "$projectDir/dream_com_front"
//
//// 리액트 소스코드를 복사할 장소를 설정
//sourceSets {
//	main {
//		resources {
//			srcDirs = ["$projectDir/src/main/resources"]
//		}
//	}
//}
//
////
//processResources {
//	dependsOn "copyReactBuildFiles"
//}
//
//// 리액트 프로젝트의 모듈을 설치하는 함수이다.
//// audit => 최적화
//// fix => 문제있는거있으면 수정
//// install => 설치
//task installReact(type: Exec) {
//	workingDir "$frontendDir"
//	inputs.dir "$frontendDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "npm.cmd", "audit", "fix"
//		commandLine "npm.cmd", "install"
//	}
//	else {
//		commandLine "npm", "audit", "fix"
//		commandLine "npm", "install"
//	}
//}
//
//// 리액트 프로젝트를 빌드하는 함수이다.
//// dependsOn "installReact" => 위에서 만듬
//// System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
//// os에 따라 빌드방식을 변경한다.
//task buildReact(type: Exec) {
//	dependsOn "installReact"
//	workingDir "$frontendDir"
//	inputs.dir "$frontendDir"
//	group = BasePlugin.BUILD_GROUP
//	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//		commandLine "npm.cmd", "run-script", "build"
//	}
//	else {
//		commandLine "npm", "run-script", "build"
//	}
//}
//
//// 리액트 프로젝트 빌드 파일을 스프링 프로젝트로 복사한다.
//// dependsOn "buildReact" => 바로 위에 선언한 함수
//// copyReactBuildFiles => 함수명 아무거나 가능함..
//// from "$frontendDir/build" => 리액트의 빌드파일을
//// into "$buildDir/resources/main/static" => 스프링 프로젝트의 빌드위치로 복사한다.
//task copyReactBuildFiles(type: Copy) {
//	dependsOn "buildReact"
//	from "$frontendDir/build"
//	into "$buildDir/resources/main/static"
//}
//
//// 배포 시 리액트 프로젝트의 배포 파일도 함께 포함한다.
//tasks.bootJar {
//	dependsOn "copyReactBuildFiles"
//}